
https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-clone

Git:

Git is distributed version control that mean every local machine/ client machine will have a local repository, and also there is a  central repository.
The advantage is , when internet goes off, we can do the changes in local repo , when online, we can push it to the master that ios central repo.


git init:

1) 
The git init command creates a new Git repository. It can be used to convert an existing, unversioned project to a Git repository or initialize 
a new, empty repository. Most other Git commands are not available outside of an initialized repository, 
so this is usually the first command you'll run in a new project.

2) Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata 
for the new repository. This metadata includes subdirectories for objects, refs, and template files. 
A HEAD file is also created which points to the currently checked out commit.

3) By default, git init will initialize the Git configuration to the .git subdirectory path.

example:
 All you have to do is cd into your project subdirectory and run git init, and you'll have a fully functional Git repository.
 
 $gin init
 
 ransform the current directory into a Git repository. This adds a .git subdirectory to the current directory and makes it possible to start recording revisions of the project.

git init <directory>
Create an empty Git repository in the specified directory. 
Running this command will create a new subdirectory called containing nothing but the .git subdirectory.

git init vs. git clone:
-----------------------
A quick note: git init and git clone can be easily confused. At a high level, they can both be used to "initialize a new git repository." 
However, git clone is dependent on git init. git clone is used to create a copy of an existing repository. Internally, 
git clone first calls git init to create a new repository. It then copies the data from the existing repository, and 
checks out a new set of working files. 

Bare repositories --- git init --bare
-------------------------------------
git init --bare <directory>
Initialize an empty Git repository, but omit the working directory.

The most common use case for  git init --bare is to create a remote central repository:

Examples
Create a new git repository for an existing code base
cd /path/to/code \
git init \
git add . \
git commit

Create a new bare repository
git init --bare /path/to/repo.git

Create a git init template and initialize a new git repository from the template
mkdir -p /path/to/template \
echo "Hello World" >> /absolute/path/to/template/README \
git init /new/repo/path --template=/absolute/path/to/template \
cd /new/repo/path \
cat /new/repo/path/README




